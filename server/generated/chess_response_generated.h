// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_CHESSRESPONSE_CHESS_RESPONSE_H_
#define FLATBUFFERS_GENERATED_CHESSRESPONSE_CHESS_RESPONSE_H_

#include "flatbuffers/flatbuffers.h"

// Ensure the included flatbuffers.h is the same version as when this file was
// generated, otherwise it may not be compatible.
static_assert(FLATBUFFERS_VERSION_MAJOR == 23 &&
              FLATBUFFERS_VERSION_MINOR == 3 &&
              FLATBUFFERS_VERSION_REVISION == 3,
             "Non-compatible flatbuffers version included");

#include "chess_common_generated.h"

namespace chess {
namespace response {

struct MoveResult;
struct MoveResultBuilder;

struct GameOver;
struct GameOverBuilder;

struct MoveResultMessage;
struct MoveResultMessageBuilder;

enum GameEndReason : int8_t {
  GameEndReason_CHECKMATE = 0,
  GameEndReason_STALEMATE = 1,
  GameEndReason_RESIGNATION = 2,
  GameEndReason_AGREED_DRAW = 3,
  GameEndReason_TIME_OUT = 4,
  GameEndReason_MIN = GameEndReason_CHECKMATE,
  GameEndReason_MAX = GameEndReason_TIME_OUT
};

inline const GameEndReason (&EnumValuesGameEndReason())[5] {
  static const GameEndReason values[] = {
    GameEndReason_CHECKMATE,
    GameEndReason_STALEMATE,
    GameEndReason_RESIGNATION,
    GameEndReason_AGREED_DRAW,
    GameEndReason_TIME_OUT
  };
  return values;
}

inline const char * const *EnumNamesGameEndReason() {
  static const char * const names[6] = {
    "CHECKMATE",
    "STALEMATE",
    "RESIGNATION",
    "AGREED_DRAW",
    "TIME_OUT",
    nullptr
  };
  return names;
}

inline const char *EnumNameGameEndReason(GameEndReason e) {
  if (::flatbuffers::IsOutRange(e, GameEndReason_CHECKMATE, GameEndReason_TIME_OUT)) return "";
  const size_t index = static_cast<size_t>(e);
  return EnumNamesGameEndReason()[index];
}

enum MoveResultType : int8_t {
  MoveResultType_VALID = 0,
  MoveResultType_INVALID = 1,
  MoveResultType_GAME_OVER = 2,
  MoveResultType_MIN = MoveResultType_VALID,
  MoveResultType_MAX = MoveResultType_GAME_OVER
};

inline const MoveResultType (&EnumValuesMoveResultType())[3] {
  static const MoveResultType values[] = {
    MoveResultType_VALID,
    MoveResultType_INVALID,
    MoveResultType_GAME_OVER
  };
  return values;
}

inline const char * const *EnumNamesMoveResultType() {
  static const char * const names[4] = {
    "VALID",
    "INVALID",
    "GAME_OVER",
    nullptr
  };
  return names;
}

inline const char *EnumNameMoveResultType(MoveResultType e) {
  if (::flatbuffers::IsOutRange(e, MoveResultType_VALID, MoveResultType_GAME_OVER)) return "";
  const size_t index = static_cast<size_t>(e);
  return EnumNamesMoveResultType()[index];
}

enum MoveResultContent : uint8_t {
  MoveResultContent_NONE = 0,
  MoveResultContent_MoveResult = 1,
  MoveResultContent_GameOver = 2,
  MoveResultContent_MIN = MoveResultContent_NONE,
  MoveResultContent_MAX = MoveResultContent_GameOver
};

inline const MoveResultContent (&EnumValuesMoveResultContent())[3] {
  static const MoveResultContent values[] = {
    MoveResultContent_NONE,
    MoveResultContent_MoveResult,
    MoveResultContent_GameOver
  };
  return values;
}

inline const char * const *EnumNamesMoveResultContent() {
  static const char * const names[4] = {
    "NONE",
    "MoveResult",
    "GameOver",
    nullptr
  };
  return names;
}

inline const char *EnumNameMoveResultContent(MoveResultContent e) {
  if (::flatbuffers::IsOutRange(e, MoveResultContent_NONE, MoveResultContent_GameOver)) return "";
  const size_t index = static_cast<size_t>(e);
  return EnumNamesMoveResultContent()[index];
}

template<typename T> struct MoveResultContentTraits {
  static const MoveResultContent enum_value = MoveResultContent_NONE;
};

template<> struct MoveResultContentTraits<chess::response::MoveResult> {
  static const MoveResultContent enum_value = MoveResultContent_MoveResult;
};

template<> struct MoveResultContentTraits<chess::response::GameOver> {
  static const MoveResultContent enum_value = MoveResultContent_GameOver;
};

bool VerifyMoveResultContent(::flatbuffers::Verifier &verifier, const void *obj, MoveResultContent type);
bool VerifyMoveResultContentVector(::flatbuffers::Verifier &verifier, const ::flatbuffers::Vector<::flatbuffers::Offset<void>> *values, const ::flatbuffers::Vector<uint8_t> *types);

struct MoveResult FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef MoveResultBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_VALID = 4,
    VT_BOARD_STATE = 6
  };
  bool valid() const {
    return GetField<uint8_t>(VT_VALID, 0) != 0;
  }
  const chess::common::BoardState *board_state() const {
    return GetPointer<const chess::common::BoardState *>(VT_BOARD_STATE);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint8_t>(verifier, VT_VALID, 1) &&
           VerifyOffset(verifier, VT_BOARD_STATE) &&
           verifier.VerifyTable(board_state()) &&
           verifier.EndTable();
  }
};

struct MoveResultBuilder {
  typedef MoveResult Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_valid(bool valid) {
    fbb_.AddElement<uint8_t>(MoveResult::VT_VALID, static_cast<uint8_t>(valid), 0);
  }
  void add_board_state(::flatbuffers::Offset<chess::common::BoardState> board_state) {
    fbb_.AddOffset(MoveResult::VT_BOARD_STATE, board_state);
  }
  explicit MoveResultBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<MoveResult> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<MoveResult>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<MoveResult> CreateMoveResult(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    bool valid = false,
    ::flatbuffers::Offset<chess::common::BoardState> board_state = 0) {
  MoveResultBuilder builder_(_fbb);
  builder_.add_board_state(board_state);
  builder_.add_valid(valid);
  return builder_.Finish();
}

struct GameOver FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef GameOverBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_WINNER_COLOR = 4,
    VT_REASON = 6,
    VT_FINAL_BOARD_STATE = 8
  };
  chess::common::PieceColor winner_color() const {
    return static_cast<chess::common::PieceColor>(GetField<int8_t>(VT_WINNER_COLOR, 0));
  }
  chess::response::GameEndReason reason() const {
    return static_cast<chess::response::GameEndReason>(GetField<int8_t>(VT_REASON, 0));
  }
  const chess::common::BoardState *final_board_state() const {
    return GetPointer<const chess::common::BoardState *>(VT_FINAL_BOARD_STATE);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<int8_t>(verifier, VT_WINNER_COLOR, 1) &&
           VerifyField<int8_t>(verifier, VT_REASON, 1) &&
           VerifyOffset(verifier, VT_FINAL_BOARD_STATE) &&
           verifier.VerifyTable(final_board_state()) &&
           verifier.EndTable();
  }
};

struct GameOverBuilder {
  typedef GameOver Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_winner_color(chess::common::PieceColor winner_color) {
    fbb_.AddElement<int8_t>(GameOver::VT_WINNER_COLOR, static_cast<int8_t>(winner_color), 0);
  }
  void add_reason(chess::response::GameEndReason reason) {
    fbb_.AddElement<int8_t>(GameOver::VT_REASON, static_cast<int8_t>(reason), 0);
  }
  void add_final_board_state(::flatbuffers::Offset<chess::common::BoardState> final_board_state) {
    fbb_.AddOffset(GameOver::VT_FINAL_BOARD_STATE, final_board_state);
  }
  explicit GameOverBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<GameOver> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<GameOver>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<GameOver> CreateGameOver(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    chess::common::PieceColor winner_color = chess::common::PieceColor_WHITE,
    chess::response::GameEndReason reason = chess::response::GameEndReason_CHECKMATE,
    ::flatbuffers::Offset<chess::common::BoardState> final_board_state = 0) {
  GameOverBuilder builder_(_fbb);
  builder_.add_final_board_state(final_board_state);
  builder_.add_reason(reason);
  builder_.add_winner_color(winner_color);
  return builder_.Finish();
}

struct MoveResultMessage FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef MoveResultMessageBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_RESULT_TYPE = 4,
    VT_CONTENT_TYPE = 6,
    VT_CONTENT = 8
  };
  chess::response::MoveResultType result_type() const {
    return static_cast<chess::response::MoveResultType>(GetField<int8_t>(VT_RESULT_TYPE, 0));
  }
  chess::response::MoveResultContent content_type() const {
    return static_cast<chess::response::MoveResultContent>(GetField<uint8_t>(VT_CONTENT_TYPE, 0));
  }
  const void *content() const {
    return GetPointer<const void *>(VT_CONTENT);
  }
  template<typename T> const T *content_as() const;
  const chess::response::MoveResult *content_as_MoveResult() const {
    return content_type() == chess::response::MoveResultContent_MoveResult ? static_cast<const chess::response::MoveResult *>(content()) : nullptr;
  }
  const chess::response::GameOver *content_as_GameOver() const {
    return content_type() == chess::response::MoveResultContent_GameOver ? static_cast<const chess::response::GameOver *>(content()) : nullptr;
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<int8_t>(verifier, VT_RESULT_TYPE, 1) &&
           VerifyField<uint8_t>(verifier, VT_CONTENT_TYPE, 1) &&
           VerifyOffset(verifier, VT_CONTENT) &&
           VerifyMoveResultContent(verifier, content(), content_type()) &&
           verifier.EndTable();
  }
};

template<> inline const chess::response::MoveResult *MoveResultMessage::content_as<chess::response::MoveResult>() const {
  return content_as_MoveResult();
}

template<> inline const chess::response::GameOver *MoveResultMessage::content_as<chess::response::GameOver>() const {
  return content_as_GameOver();
}

struct MoveResultMessageBuilder {
  typedef MoveResultMessage Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_result_type(chess::response::MoveResultType result_type) {
    fbb_.AddElement<int8_t>(MoveResultMessage::VT_RESULT_TYPE, static_cast<int8_t>(result_type), 0);
  }
  void add_content_type(chess::response::MoveResultContent content_type) {
    fbb_.AddElement<uint8_t>(MoveResultMessage::VT_CONTENT_TYPE, static_cast<uint8_t>(content_type), 0);
  }
  void add_content(::flatbuffers::Offset<void> content) {
    fbb_.AddOffset(MoveResultMessage::VT_CONTENT, content);
  }
  explicit MoveResultMessageBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<MoveResultMessage> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<MoveResultMessage>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<MoveResultMessage> CreateMoveResultMessage(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    chess::response::MoveResultType result_type = chess::response::MoveResultType_VALID,
    chess::response::MoveResultContent content_type = chess::response::MoveResultContent_NONE,
    ::flatbuffers::Offset<void> content = 0) {
  MoveResultMessageBuilder builder_(_fbb);
  builder_.add_content(content);
  builder_.add_content_type(content_type);
  builder_.add_result_type(result_type);
  return builder_.Finish();
}

inline bool VerifyMoveResultContent(::flatbuffers::Verifier &verifier, const void *obj, MoveResultContent type) {
  switch (type) {
    case MoveResultContent_NONE: {
      return true;
    }
    case MoveResultContent_MoveResult: {
      auto ptr = reinterpret_cast<const chess::response::MoveResult *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case MoveResultContent_GameOver: {
      auto ptr = reinterpret_cast<const chess::response::GameOver *>(obj);
      return verifier.VerifyTable(ptr);
    }
    default: return true;
  }
}

inline bool VerifyMoveResultContentVector(::flatbuffers::Verifier &verifier, const ::flatbuffers::Vector<::flatbuffers::Offset<void>> *values, const ::flatbuffers::Vector<uint8_t> *types) {
  if (!values || !types) return !values && !types;
  if (values->size() != types->size()) return false;
  for (::flatbuffers::uoffset_t i = 0; i < values->size(); ++i) {
    if (!VerifyMoveResultContent(
        verifier,  values->Get(i), types->GetEnum<MoveResultContent>(i))) {
      return false;
    }
  }
  return true;
}

inline const chess::response::MoveResultMessage *GetMoveResultMessage(const void *buf) {
  return ::flatbuffers::GetRoot<chess::response::MoveResultMessage>(buf);
}

inline const chess::response::MoveResultMessage *GetSizePrefixedMoveResultMessage(const void *buf) {
  return ::flatbuffers::GetSizePrefixedRoot<chess::response::MoveResultMessage>(buf);
}

inline bool VerifyMoveResultMessageBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<chess::response::MoveResultMessage>(nullptr);
}

inline bool VerifySizePrefixedMoveResultMessageBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<chess::response::MoveResultMessage>(nullptr);
}

inline void FinishMoveResultMessageBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<chess::response::MoveResultMessage> root) {
  fbb.Finish(root);
}

inline void FinishSizePrefixedMoveResultMessageBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<chess::response::MoveResultMessage> root) {
  fbb.FinishSizePrefixed(root);
}

}  // namespace response
}  // namespace chess

#endif  // FLATBUFFERS_GENERATED_CHESSRESPONSE_CHESS_RESPONSE_H_
