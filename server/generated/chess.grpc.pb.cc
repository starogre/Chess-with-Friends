// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: chess.proto

#include "chess.pb.h"
#include "chess.grpc.pb.h"

#include <functional>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/impl/channel_interface.h>
#include <grpcpp/impl/client_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/rpc_service_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/support/sync_stream.h>
namespace chess {
namespace standard {

static const char* ChessService_method_names[] = {
  "/chess.standard.ChessService/MakeMove",
  "/chess.standard.ChessService/EndGame",
};

std::unique_ptr< ChessService::Stub> ChessService::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< ChessService::Stub> stub(new ChessService::Stub(channel, options));
  return stub;
}

ChessService::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_MakeMove_(ChessService_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_EndGame_(ChessService_method_names[1], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status ChessService::Stub::MakeMove(::grpc::ClientContext* context, const ::chess::standard::Move& request, ::chess::standard::MoveResultMessage* response) {
  return ::grpc::internal::BlockingUnaryCall< ::chess::standard::Move, ::chess::standard::MoveResultMessage, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_MakeMove_, context, request, response);
}

void ChessService::Stub::async::MakeMove(::grpc::ClientContext* context, const ::chess::standard::Move* request, ::chess::standard::MoveResultMessage* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::chess::standard::Move, ::chess::standard::MoveResultMessage, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_MakeMove_, context, request, response, std::move(f));
}

void ChessService::Stub::async::MakeMove(::grpc::ClientContext* context, const ::chess::standard::Move* request, ::chess::standard::MoveResultMessage* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_MakeMove_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::chess::standard::MoveResultMessage>* ChessService::Stub::PrepareAsyncMakeMoveRaw(::grpc::ClientContext* context, const ::chess::standard::Move& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::chess::standard::MoveResultMessage, ::chess::standard::Move, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_MakeMove_, context, request);
}

::grpc::ClientAsyncResponseReader< ::chess::standard::MoveResultMessage>* ChessService::Stub::AsyncMakeMoveRaw(::grpc::ClientContext* context, const ::chess::standard::Move& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncMakeMoveRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ChessService::Stub::EndGame(::grpc::ClientContext* context, const ::chess::standard::GameOverMessage& request, ::chess::standard::MoveResultMessage* response) {
  return ::grpc::internal::BlockingUnaryCall< ::chess::standard::GameOverMessage, ::chess::standard::MoveResultMessage, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_EndGame_, context, request, response);
}

void ChessService::Stub::async::EndGame(::grpc::ClientContext* context, const ::chess::standard::GameOverMessage* request, ::chess::standard::MoveResultMessage* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::chess::standard::GameOverMessage, ::chess::standard::MoveResultMessage, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_EndGame_, context, request, response, std::move(f));
}

void ChessService::Stub::async::EndGame(::grpc::ClientContext* context, const ::chess::standard::GameOverMessage* request, ::chess::standard::MoveResultMessage* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_EndGame_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::chess::standard::MoveResultMessage>* ChessService::Stub::PrepareAsyncEndGameRaw(::grpc::ClientContext* context, const ::chess::standard::GameOverMessage& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::chess::standard::MoveResultMessage, ::chess::standard::GameOverMessage, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_EndGame_, context, request);
}

::grpc::ClientAsyncResponseReader< ::chess::standard::MoveResultMessage>* ChessService::Stub::AsyncEndGameRaw(::grpc::ClientContext* context, const ::chess::standard::GameOverMessage& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncEndGameRaw(context, request, cq);
  result->StartCall();
  return result;
}

ChessService::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ChessService_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ChessService::Service, ::chess::standard::Move, ::chess::standard::MoveResultMessage, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ChessService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::chess::standard::Move* req,
             ::chess::standard::MoveResultMessage* resp) {
               return service->MakeMove(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ChessService_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ChessService::Service, ::chess::standard::GameOverMessage, ::chess::standard::MoveResultMessage, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ChessService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::chess::standard::GameOverMessage* req,
             ::chess::standard::MoveResultMessage* resp) {
               return service->EndGame(ctx, req, resp);
             }, this)));
}

ChessService::Service::~Service() {
}

::grpc::Status ChessService::Service::MakeMove(::grpc::ServerContext* context, const ::chess::standard::Move* request, ::chess::standard::MoveResultMessage* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ChessService::Service::EndGame(::grpc::ServerContext* context, const ::chess::standard::GameOverMessage* request, ::chess::standard::MoveResultMessage* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace chess
}  // namespace standard

