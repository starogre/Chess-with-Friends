// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: chess.proto

#include "chess.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace chess {
namespace standard {
PROTOBUF_CONSTEXPR Position::Position(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.x_)*/0
  , /*decltype(_impl_.y_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct PositionDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PositionDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PositionDefaultTypeInternal() {}
  union {
    Position _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PositionDefaultTypeInternal _Position_default_instance_;
PROTOBUF_CONSTEXPR Piece::Piece(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.position_)*/nullptr
  , /*decltype(_impl_.id_)*/0
  , /*decltype(_impl_.piece_type_)*/0
  , /*decltype(_impl_.color_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct PieceDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PieceDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PieceDefaultTypeInternal() {}
  union {
    Piece _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PieceDefaultTypeInternal _Piece_default_instance_;
PROTOBUF_CONSTEXPR BoardState::BoardState(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.pieces_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct BoardStateDefaultTypeInternal {
  PROTOBUF_CONSTEXPR BoardStateDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~BoardStateDefaultTypeInternal() {}
  union {
    BoardState _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 BoardStateDefaultTypeInternal _BoardState_default_instance_;
PROTOBUF_CONSTEXPR Move::Move(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.from_position_)*/nullptr
  , /*decltype(_impl_.to_position_)*/nullptr
  , /*decltype(_impl_.piece_id_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct MoveDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MoveDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~MoveDefaultTypeInternal() {}
  union {
    Move _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MoveDefaultTypeInternal _Move_default_instance_;
PROTOBUF_CONSTEXPR MoveMessage::MoveMessage(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.move_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct MoveMessageDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MoveMessageDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~MoveMessageDefaultTypeInternal() {}
  union {
    MoveMessage _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MoveMessageDefaultTypeInternal _MoveMessage_default_instance_;
PROTOBUF_CONSTEXPR MoveResultMessage::MoveResultMessage(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.move_)*/nullptr
  , /*decltype(_impl_.board_state_)*/nullptr
  , /*decltype(_impl_.valid_)*/false
  , /*decltype(_impl_.error_code_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct MoveResultMessageDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MoveResultMessageDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~MoveResultMessageDefaultTypeInternal() {}
  union {
    MoveResultMessage _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MoveResultMessageDefaultTypeInternal _MoveResultMessage_default_instance_;
PROTOBUF_CONSTEXPR GameOverMessage::GameOverMessage(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.winner_color_)*/0
  , /*decltype(_impl_.reason_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct GameOverMessageDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GameOverMessageDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GameOverMessageDefaultTypeInternal() {}
  union {
    GameOverMessage _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GameOverMessageDefaultTypeInternal _GameOverMessage_default_instance_;
PROTOBUF_CONSTEXPR Message::Message(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.message_type_)*/0
  , /*decltype(_impl_.content_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_._oneof_case_)*/{}} {}
struct MessageDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MessageDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~MessageDefaultTypeInternal() {}
  union {
    Message _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MessageDefaultTypeInternal _Message_default_instance_;
}  // namespace standard
}  // namespace chess
static ::_pb::Metadata file_level_metadata_chess_2eproto[8];
static const ::_pb::EnumDescriptor* file_level_enum_descriptors_chess_2eproto[4];
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_chess_2eproto = nullptr;

const uint32_t TableStruct_chess_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::chess::standard::Position, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::chess::standard::Position, _impl_.x_),
  PROTOBUF_FIELD_OFFSET(::chess::standard::Position, _impl_.y_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::chess::standard::Piece, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::chess::standard::Piece, _impl_.id_),
  PROTOBUF_FIELD_OFFSET(::chess::standard::Piece, _impl_.piece_type_),
  PROTOBUF_FIELD_OFFSET(::chess::standard::Piece, _impl_.color_),
  PROTOBUF_FIELD_OFFSET(::chess::standard::Piece, _impl_.position_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::chess::standard::BoardState, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::chess::standard::BoardState, _impl_.pieces_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::chess::standard::Move, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::chess::standard::Move, _impl_.piece_id_),
  PROTOBUF_FIELD_OFFSET(::chess::standard::Move, _impl_.from_position_),
  PROTOBUF_FIELD_OFFSET(::chess::standard::Move, _impl_.to_position_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::chess::standard::MoveMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::chess::standard::MoveMessage, _impl_.move_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::chess::standard::MoveResultMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::chess::standard::MoveResultMessage, _impl_.move_),
  PROTOBUF_FIELD_OFFSET(::chess::standard::MoveResultMessage, _impl_.board_state_),
  PROTOBUF_FIELD_OFFSET(::chess::standard::MoveResultMessage, _impl_.valid_),
  PROTOBUF_FIELD_OFFSET(::chess::standard::MoveResultMessage, _impl_.error_code_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::chess::standard::GameOverMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::chess::standard::GameOverMessage, _impl_.winner_color_),
  PROTOBUF_FIELD_OFFSET(::chess::standard::GameOverMessage, _impl_.reason_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::chess::standard::Message, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::chess::standard::Message, _impl_._oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::chess::standard::Message, _impl_.message_type_),
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::chess::standard::Message, _impl_.content_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::chess::standard::Position)},
  { 8, -1, -1, sizeof(::chess::standard::Piece)},
  { 18, -1, -1, sizeof(::chess::standard::BoardState)},
  { 25, -1, -1, sizeof(::chess::standard::Move)},
  { 34, -1, -1, sizeof(::chess::standard::MoveMessage)},
  { 41, -1, -1, sizeof(::chess::standard::MoveResultMessage)},
  { 51, -1, -1, sizeof(::chess::standard::GameOverMessage)},
  { 59, -1, -1, sizeof(::chess::standard::Message)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::chess::standard::_Position_default_instance_._instance,
  &::chess::standard::_Piece_default_instance_._instance,
  &::chess::standard::_BoardState_default_instance_._instance,
  &::chess::standard::_Move_default_instance_._instance,
  &::chess::standard::_MoveMessage_default_instance_._instance,
  &::chess::standard::_MoveResultMessage_default_instance_._instance,
  &::chess::standard::_GameOverMessage_default_instance_._instance,
  &::chess::standard::_Message_default_instance_._instance,
};

const char descriptor_table_protodef_chess_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\013chess.proto\022\016chess.standard\" \n\010Positio"
  "n\022\t\n\001x\030\001 \001(\005\022\t\n\001y\030\002 \001(\005\"\231\001\n\005Piece\022\n\n\002id\030"
  "\001 \001(\005\022-\n\npiece_type\030\002 \001(\0162\031.chess.standa"
  "rd.PieceType\022)\n\005color\030\003 \001(\0162\032.chess.stan"
  "dard.PieceColor\022*\n\010position\030\004 \001(\0132\030.ches"
  "s.standard.Position\"3\n\nBoardState\022%\n\006pie"
  "ces\030\001 \003(\0132\025.chess.standard.Piece\"x\n\004Move"
  "\022\020\n\010piece_id\030\001 \001(\005\022/\n\rfrom_position\030\002 \001("
  "\0132\030.chess.standard.Position\022-\n\013to_positi"
  "on\030\003 \001(\0132\030.chess.standard.Position\"1\n\013Mo"
  "veMessage\022\"\n\004move\030\001 \001(\0132\024.chess.standard"
  ".Move\"\213\001\n\021MoveResultMessage\022\"\n\004move\030\001 \001("
  "\0132\024.chess.standard.Move\022/\n\013board_state\030\002"
  " \001(\0132\032.chess.standard.BoardState\022\r\n\005vali"
  "d\030\003 \001(\010\022\022\n\nerror_code\030\004 \001(\r\"r\n\017GameOverM"
  "essage\0220\n\014winner_color\030\001 \001(\0162\032.chess.sta"
  "ndard.PieceColor\022-\n\006reason\030\002 \001(\0162\035.chess"
  ".standard.GameEndReason\"\374\001\n\007Message\0221\n\014m"
  "essage_type\030\001 \001(\0162\033.chess.standard.Messa"
  "geType\0223\n\014move_message\030\002 \001(\0132\033.chess.sta"
  "ndard.MoveMessageH\000\022@\n\023move_result_messa"
  "ge\030\003 \001(\0132!.chess.standard.MoveResultMess"
  "ageH\000\022<\n\021game_over_message\030\004 \001(\0132\037.chess"
  ".standard.GameOverMessageH\000B\t\n\007content*L"
  "\n\tPieceType\022\010\n\004PAWN\020\000\022\010\n\004ROOK\020\001\022\n\n\006KNIGH"
  "T\020\002\022\n\n\006BISHOP\020\003\022\t\n\005QUEEN\020\004\022\010\n\004KING\020\005*\"\n\n"
  "PieceColor\022\t\n\005WHITE\020\000\022\t\n\005BLACK\020\001*7\n\013Mess"
  "ageType\022\010\n\004MOVE\020\000\022\017\n\013MOVE_RESULT\020\001\022\r\n\tGA"
  "ME_OVER\020\002*]\n\rGameEndReason\022\r\n\tCHECKMATE\020"
  "\000\022\r\n\tSTALEMATE\020\001\022\017\n\013RESIGNATION\020\002\022\017\n\013AGR"
  "EED_DRAW\020\003\022\014\n\010TIME_OUT\020\0042\242\001\n\014ChessServic"
  "e\022C\n\010MakeMove\022\024.chess.standard.Move\032!.ch"
  "ess.standard.MoveResultMessage\022M\n\007EndGam"
  "e\022\037.chess.standard.GameOverMessage\032!.che"
  "ss.standard.MoveResultMessageb\006proto3"
  ;
static ::_pbi::once_flag descriptor_table_chess_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_chess_2eproto = {
    false, false, 1397, descriptor_table_protodef_chess_2eproto,
    "chess.proto",
    &descriptor_table_chess_2eproto_once, nullptr, 0, 8,
    schemas, file_default_instances, TableStruct_chess_2eproto::offsets,
    file_level_metadata_chess_2eproto, file_level_enum_descriptors_chess_2eproto,
    file_level_service_descriptors_chess_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_chess_2eproto_getter() {
  return &descriptor_table_chess_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_chess_2eproto(&descriptor_table_chess_2eproto);
namespace chess {
namespace standard {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* PieceType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_chess_2eproto);
  return file_level_enum_descriptors_chess_2eproto[0];
}
bool PieceType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* PieceColor_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_chess_2eproto);
  return file_level_enum_descriptors_chess_2eproto[1];
}
bool PieceColor_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* MessageType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_chess_2eproto);
  return file_level_enum_descriptors_chess_2eproto[2];
}
bool MessageType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* GameEndReason_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_chess_2eproto);
  return file_level_enum_descriptors_chess_2eproto[3];
}
bool GameEndReason_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}


// ===================================================================

class Position::_Internal {
 public:
};

Position::Position(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:chess.standard.Position)
}
Position::Position(const Position& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Position* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.x_){}
    , decltype(_impl_.y_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.x_, &from._impl_.x_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.y_) -
    reinterpret_cast<char*>(&_impl_.x_)) + sizeof(_impl_.y_));
  // @@protoc_insertion_point(copy_constructor:chess.standard.Position)
}

inline void Position::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.x_){0}
    , decltype(_impl_.y_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

Position::~Position() {
  // @@protoc_insertion_point(destructor:chess.standard.Position)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Position::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void Position::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Position::Clear() {
// @@protoc_insertion_point(message_clear_start:chess.standard.Position)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.x_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.y_) -
      reinterpret_cast<char*>(&_impl_.x_)) + sizeof(_impl_.y_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Position::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 x = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.x_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 y = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.y_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Position::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:chess.standard.Position)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 x = 1;
  if (this->_internal_x() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_x(), target);
  }

  // int32 y = 2;
  if (this->_internal_y() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_y(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:chess.standard.Position)
  return target;
}

size_t Position::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:chess.standard.Position)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 x = 1;
  if (this->_internal_x() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_x());
  }

  // int32 y = 2;
  if (this->_internal_y() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_y());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Position::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Position::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Position::GetClassData() const { return &_class_data_; }


void Position::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Position*>(&to_msg);
  auto& from = static_cast<const Position&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:chess.standard.Position)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_x() != 0) {
    _this->_internal_set_x(from._internal_x());
  }
  if (from._internal_y() != 0) {
    _this->_internal_set_y(from._internal_y());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Position::CopyFrom(const Position& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:chess.standard.Position)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Position::IsInitialized() const {
  return true;
}

void Position::InternalSwap(Position* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Position, _impl_.y_)
      + sizeof(Position::_impl_.y_)
      - PROTOBUF_FIELD_OFFSET(Position, _impl_.x_)>(
          reinterpret_cast<char*>(&_impl_.x_),
          reinterpret_cast<char*>(&other->_impl_.x_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Position::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_chess_2eproto_getter, &descriptor_table_chess_2eproto_once,
      file_level_metadata_chess_2eproto[0]);
}

// ===================================================================

class Piece::_Internal {
 public:
  static const ::chess::standard::Position& position(const Piece* msg);
};

const ::chess::standard::Position&
Piece::_Internal::position(const Piece* msg) {
  return *msg->_impl_.position_;
}
Piece::Piece(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:chess.standard.Piece)
}
Piece::Piece(const Piece& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Piece* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.position_){nullptr}
    , decltype(_impl_.id_){}
    , decltype(_impl_.piece_type_){}
    , decltype(_impl_.color_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_position()) {
    _this->_impl_.position_ = new ::chess::standard::Position(*from._impl_.position_);
  }
  ::memcpy(&_impl_.id_, &from._impl_.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.color_) -
    reinterpret_cast<char*>(&_impl_.id_)) + sizeof(_impl_.color_));
  // @@protoc_insertion_point(copy_constructor:chess.standard.Piece)
}

inline void Piece::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.position_){nullptr}
    , decltype(_impl_.id_){0}
    , decltype(_impl_.piece_type_){0}
    , decltype(_impl_.color_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

Piece::~Piece() {
  // @@protoc_insertion_point(destructor:chess.standard.Piece)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Piece::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.position_;
}

void Piece::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Piece::Clear() {
// @@protoc_insertion_point(message_clear_start:chess.standard.Piece)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.position_ != nullptr) {
    delete _impl_.position_;
  }
  _impl_.position_ = nullptr;
  ::memset(&_impl_.id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.color_) -
      reinterpret_cast<char*>(&_impl_.id_)) + sizeof(_impl_.color_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Piece::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .chess.standard.PieceType piece_type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_piece_type(static_cast<::chess::standard::PieceType>(val));
        } else
          goto handle_unusual;
        continue;
      // .chess.standard.PieceColor color = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_color(static_cast<::chess::standard::PieceColor>(val));
        } else
          goto handle_unusual;
        continue;
      // .chess.standard.Position position = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_position(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Piece::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:chess.standard.Piece)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 id = 1;
  if (this->_internal_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_id(), target);
  }

  // .chess.standard.PieceType piece_type = 2;
  if (this->_internal_piece_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      2, this->_internal_piece_type(), target);
  }

  // .chess.standard.PieceColor color = 3;
  if (this->_internal_color() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      3, this->_internal_color(), target);
  }

  // .chess.standard.Position position = 4;
  if (this->_internal_has_position()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::position(this),
        _Internal::position(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:chess.standard.Piece)
  return target;
}

size_t Piece::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:chess.standard.Piece)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .chess.standard.Position position = 4;
  if (this->_internal_has_position()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.position_);
  }

  // int32 id = 1;
  if (this->_internal_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_id());
  }

  // .chess.standard.PieceType piece_type = 2;
  if (this->_internal_piece_type() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_piece_type());
  }

  // .chess.standard.PieceColor color = 3;
  if (this->_internal_color() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_color());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Piece::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Piece::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Piece::GetClassData() const { return &_class_data_; }


void Piece::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Piece*>(&to_msg);
  auto& from = static_cast<const Piece&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:chess.standard.Piece)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_position()) {
    _this->_internal_mutable_position()->::chess::standard::Position::MergeFrom(
        from._internal_position());
  }
  if (from._internal_id() != 0) {
    _this->_internal_set_id(from._internal_id());
  }
  if (from._internal_piece_type() != 0) {
    _this->_internal_set_piece_type(from._internal_piece_type());
  }
  if (from._internal_color() != 0) {
    _this->_internal_set_color(from._internal_color());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Piece::CopyFrom(const Piece& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:chess.standard.Piece)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Piece::IsInitialized() const {
  return true;
}

void Piece::InternalSwap(Piece* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Piece, _impl_.color_)
      + sizeof(Piece::_impl_.color_)
      - PROTOBUF_FIELD_OFFSET(Piece, _impl_.position_)>(
          reinterpret_cast<char*>(&_impl_.position_),
          reinterpret_cast<char*>(&other->_impl_.position_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Piece::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_chess_2eproto_getter, &descriptor_table_chess_2eproto_once,
      file_level_metadata_chess_2eproto[1]);
}

// ===================================================================

class BoardState::_Internal {
 public:
};

BoardState::BoardState(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:chess.standard.BoardState)
}
BoardState::BoardState(const BoardState& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  BoardState* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.pieces_){from._impl_.pieces_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:chess.standard.BoardState)
}

inline void BoardState::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.pieces_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

BoardState::~BoardState() {
  // @@protoc_insertion_point(destructor:chess.standard.BoardState)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void BoardState::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.pieces_.~RepeatedPtrField();
}

void BoardState::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void BoardState::Clear() {
// @@protoc_insertion_point(message_clear_start:chess.standard.BoardState)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.pieces_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* BoardState::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .chess.standard.Piece pieces = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_pieces(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* BoardState::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:chess.standard.BoardState)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .chess.standard.Piece pieces = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_pieces_size()); i < n; i++) {
    const auto& repfield = this->_internal_pieces(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:chess.standard.BoardState)
  return target;
}

size_t BoardState::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:chess.standard.BoardState)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .chess.standard.Piece pieces = 1;
  total_size += 1UL * this->_internal_pieces_size();
  for (const auto& msg : this->_impl_.pieces_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData BoardState::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    BoardState::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*BoardState::GetClassData() const { return &_class_data_; }


void BoardState::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<BoardState*>(&to_msg);
  auto& from = static_cast<const BoardState&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:chess.standard.BoardState)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.pieces_.MergeFrom(from._impl_.pieces_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void BoardState::CopyFrom(const BoardState& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:chess.standard.BoardState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BoardState::IsInitialized() const {
  return true;
}

void BoardState::InternalSwap(BoardState* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.pieces_.InternalSwap(&other->_impl_.pieces_);
}

::PROTOBUF_NAMESPACE_ID::Metadata BoardState::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_chess_2eproto_getter, &descriptor_table_chess_2eproto_once,
      file_level_metadata_chess_2eproto[2]);
}

// ===================================================================

class Move::_Internal {
 public:
  static const ::chess::standard::Position& from_position(const Move* msg);
  static const ::chess::standard::Position& to_position(const Move* msg);
};

const ::chess::standard::Position&
Move::_Internal::from_position(const Move* msg) {
  return *msg->_impl_.from_position_;
}
const ::chess::standard::Position&
Move::_Internal::to_position(const Move* msg) {
  return *msg->_impl_.to_position_;
}
Move::Move(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:chess.standard.Move)
}
Move::Move(const Move& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Move* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.from_position_){nullptr}
    , decltype(_impl_.to_position_){nullptr}
    , decltype(_impl_.piece_id_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_from_position()) {
    _this->_impl_.from_position_ = new ::chess::standard::Position(*from._impl_.from_position_);
  }
  if (from._internal_has_to_position()) {
    _this->_impl_.to_position_ = new ::chess::standard::Position(*from._impl_.to_position_);
  }
  _this->_impl_.piece_id_ = from._impl_.piece_id_;
  // @@protoc_insertion_point(copy_constructor:chess.standard.Move)
}

inline void Move::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.from_position_){nullptr}
    , decltype(_impl_.to_position_){nullptr}
    , decltype(_impl_.piece_id_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

Move::~Move() {
  // @@protoc_insertion_point(destructor:chess.standard.Move)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Move::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.from_position_;
  if (this != internal_default_instance()) delete _impl_.to_position_;
}

void Move::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Move::Clear() {
// @@protoc_insertion_point(message_clear_start:chess.standard.Move)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.from_position_ != nullptr) {
    delete _impl_.from_position_;
  }
  _impl_.from_position_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.to_position_ != nullptr) {
    delete _impl_.to_position_;
  }
  _impl_.to_position_ = nullptr;
  _impl_.piece_id_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Move::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 piece_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.piece_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .chess.standard.Position from_position = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_from_position(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .chess.standard.Position to_position = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_to_position(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Move::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:chess.standard.Move)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 piece_id = 1;
  if (this->_internal_piece_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_piece_id(), target);
  }

  // .chess.standard.Position from_position = 2;
  if (this->_internal_has_from_position()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::from_position(this),
        _Internal::from_position(this).GetCachedSize(), target, stream);
  }

  // .chess.standard.Position to_position = 3;
  if (this->_internal_has_to_position()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::to_position(this),
        _Internal::to_position(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:chess.standard.Move)
  return target;
}

size_t Move::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:chess.standard.Move)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .chess.standard.Position from_position = 2;
  if (this->_internal_has_from_position()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.from_position_);
  }

  // .chess.standard.Position to_position = 3;
  if (this->_internal_has_to_position()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.to_position_);
  }

  // int32 piece_id = 1;
  if (this->_internal_piece_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_piece_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Move::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Move::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Move::GetClassData() const { return &_class_data_; }


void Move::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Move*>(&to_msg);
  auto& from = static_cast<const Move&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:chess.standard.Move)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_from_position()) {
    _this->_internal_mutable_from_position()->::chess::standard::Position::MergeFrom(
        from._internal_from_position());
  }
  if (from._internal_has_to_position()) {
    _this->_internal_mutable_to_position()->::chess::standard::Position::MergeFrom(
        from._internal_to_position());
  }
  if (from._internal_piece_id() != 0) {
    _this->_internal_set_piece_id(from._internal_piece_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Move::CopyFrom(const Move& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:chess.standard.Move)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Move::IsInitialized() const {
  return true;
}

void Move::InternalSwap(Move* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Move, _impl_.piece_id_)
      + sizeof(Move::_impl_.piece_id_)
      - PROTOBUF_FIELD_OFFSET(Move, _impl_.from_position_)>(
          reinterpret_cast<char*>(&_impl_.from_position_),
          reinterpret_cast<char*>(&other->_impl_.from_position_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Move::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_chess_2eproto_getter, &descriptor_table_chess_2eproto_once,
      file_level_metadata_chess_2eproto[3]);
}

// ===================================================================

class MoveMessage::_Internal {
 public:
  static const ::chess::standard::Move& move(const MoveMessage* msg);
};

const ::chess::standard::Move&
MoveMessage::_Internal::move(const MoveMessage* msg) {
  return *msg->_impl_.move_;
}
MoveMessage::MoveMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:chess.standard.MoveMessage)
}
MoveMessage::MoveMessage(const MoveMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  MoveMessage* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.move_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_move()) {
    _this->_impl_.move_ = new ::chess::standard::Move(*from._impl_.move_);
  }
  // @@protoc_insertion_point(copy_constructor:chess.standard.MoveMessage)
}

inline void MoveMessage::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.move_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

MoveMessage::~MoveMessage() {
  // @@protoc_insertion_point(destructor:chess.standard.MoveMessage)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void MoveMessage::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.move_;
}

void MoveMessage::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void MoveMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:chess.standard.MoveMessage)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.move_ != nullptr) {
    delete _impl_.move_;
  }
  _impl_.move_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MoveMessage::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .chess.standard.Move move = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_move(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* MoveMessage::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:chess.standard.MoveMessage)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .chess.standard.Move move = 1;
  if (this->_internal_has_move()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::move(this),
        _Internal::move(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:chess.standard.MoveMessage)
  return target;
}

size_t MoveMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:chess.standard.MoveMessage)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .chess.standard.Move move = 1;
  if (this->_internal_has_move()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.move_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MoveMessage::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    MoveMessage::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MoveMessage::GetClassData() const { return &_class_data_; }


void MoveMessage::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<MoveMessage*>(&to_msg);
  auto& from = static_cast<const MoveMessage&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:chess.standard.MoveMessage)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_move()) {
    _this->_internal_mutable_move()->::chess::standard::Move::MergeFrom(
        from._internal_move());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void MoveMessage::CopyFrom(const MoveMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:chess.standard.MoveMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MoveMessage::IsInitialized() const {
  return true;
}

void MoveMessage::InternalSwap(MoveMessage* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.move_, other->_impl_.move_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MoveMessage::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_chess_2eproto_getter, &descriptor_table_chess_2eproto_once,
      file_level_metadata_chess_2eproto[4]);
}

// ===================================================================

class MoveResultMessage::_Internal {
 public:
  static const ::chess::standard::Move& move(const MoveResultMessage* msg);
  static const ::chess::standard::BoardState& board_state(const MoveResultMessage* msg);
};

const ::chess::standard::Move&
MoveResultMessage::_Internal::move(const MoveResultMessage* msg) {
  return *msg->_impl_.move_;
}
const ::chess::standard::BoardState&
MoveResultMessage::_Internal::board_state(const MoveResultMessage* msg) {
  return *msg->_impl_.board_state_;
}
MoveResultMessage::MoveResultMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:chess.standard.MoveResultMessage)
}
MoveResultMessage::MoveResultMessage(const MoveResultMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  MoveResultMessage* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.move_){nullptr}
    , decltype(_impl_.board_state_){nullptr}
    , decltype(_impl_.valid_){}
    , decltype(_impl_.error_code_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_move()) {
    _this->_impl_.move_ = new ::chess::standard::Move(*from._impl_.move_);
  }
  if (from._internal_has_board_state()) {
    _this->_impl_.board_state_ = new ::chess::standard::BoardState(*from._impl_.board_state_);
  }
  ::memcpy(&_impl_.valid_, &from._impl_.valid_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.error_code_) -
    reinterpret_cast<char*>(&_impl_.valid_)) + sizeof(_impl_.error_code_));
  // @@protoc_insertion_point(copy_constructor:chess.standard.MoveResultMessage)
}

inline void MoveResultMessage::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.move_){nullptr}
    , decltype(_impl_.board_state_){nullptr}
    , decltype(_impl_.valid_){false}
    , decltype(_impl_.error_code_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

MoveResultMessage::~MoveResultMessage() {
  // @@protoc_insertion_point(destructor:chess.standard.MoveResultMessage)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void MoveResultMessage::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.move_;
  if (this != internal_default_instance()) delete _impl_.board_state_;
}

void MoveResultMessage::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void MoveResultMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:chess.standard.MoveResultMessage)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.move_ != nullptr) {
    delete _impl_.move_;
  }
  _impl_.move_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.board_state_ != nullptr) {
    delete _impl_.board_state_;
  }
  _impl_.board_state_ = nullptr;
  ::memset(&_impl_.valid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.error_code_) -
      reinterpret_cast<char*>(&_impl_.valid_)) + sizeof(_impl_.error_code_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MoveResultMessage::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .chess.standard.Move move = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_move(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .chess.standard.BoardState board_state = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_board_state(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool valid = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.valid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 error_code = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.error_code_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* MoveResultMessage::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:chess.standard.MoveResultMessage)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .chess.standard.Move move = 1;
  if (this->_internal_has_move()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::move(this),
        _Internal::move(this).GetCachedSize(), target, stream);
  }

  // .chess.standard.BoardState board_state = 2;
  if (this->_internal_has_board_state()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::board_state(this),
        _Internal::board_state(this).GetCachedSize(), target, stream);
  }

  // bool valid = 3;
  if (this->_internal_valid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(3, this->_internal_valid(), target);
  }

  // uint32 error_code = 4;
  if (this->_internal_error_code() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(4, this->_internal_error_code(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:chess.standard.MoveResultMessage)
  return target;
}

size_t MoveResultMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:chess.standard.MoveResultMessage)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .chess.standard.Move move = 1;
  if (this->_internal_has_move()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.move_);
  }

  // .chess.standard.BoardState board_state = 2;
  if (this->_internal_has_board_state()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.board_state_);
  }

  // bool valid = 3;
  if (this->_internal_valid() != 0) {
    total_size += 1 + 1;
  }

  // uint32 error_code = 4;
  if (this->_internal_error_code() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_error_code());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MoveResultMessage::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    MoveResultMessage::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MoveResultMessage::GetClassData() const { return &_class_data_; }


void MoveResultMessage::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<MoveResultMessage*>(&to_msg);
  auto& from = static_cast<const MoveResultMessage&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:chess.standard.MoveResultMessage)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_move()) {
    _this->_internal_mutable_move()->::chess::standard::Move::MergeFrom(
        from._internal_move());
  }
  if (from._internal_has_board_state()) {
    _this->_internal_mutable_board_state()->::chess::standard::BoardState::MergeFrom(
        from._internal_board_state());
  }
  if (from._internal_valid() != 0) {
    _this->_internal_set_valid(from._internal_valid());
  }
  if (from._internal_error_code() != 0) {
    _this->_internal_set_error_code(from._internal_error_code());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void MoveResultMessage::CopyFrom(const MoveResultMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:chess.standard.MoveResultMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MoveResultMessage::IsInitialized() const {
  return true;
}

void MoveResultMessage::InternalSwap(MoveResultMessage* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(MoveResultMessage, _impl_.error_code_)
      + sizeof(MoveResultMessage::_impl_.error_code_)
      - PROTOBUF_FIELD_OFFSET(MoveResultMessage, _impl_.move_)>(
          reinterpret_cast<char*>(&_impl_.move_),
          reinterpret_cast<char*>(&other->_impl_.move_));
}

::PROTOBUF_NAMESPACE_ID::Metadata MoveResultMessage::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_chess_2eproto_getter, &descriptor_table_chess_2eproto_once,
      file_level_metadata_chess_2eproto[5]);
}

// ===================================================================

class GameOverMessage::_Internal {
 public:
};

GameOverMessage::GameOverMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:chess.standard.GameOverMessage)
}
GameOverMessage::GameOverMessage(const GameOverMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GameOverMessage* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.winner_color_){}
    , decltype(_impl_.reason_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.winner_color_, &from._impl_.winner_color_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.reason_) -
    reinterpret_cast<char*>(&_impl_.winner_color_)) + sizeof(_impl_.reason_));
  // @@protoc_insertion_point(copy_constructor:chess.standard.GameOverMessage)
}

inline void GameOverMessage::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.winner_color_){0}
    , decltype(_impl_.reason_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

GameOverMessage::~GameOverMessage() {
  // @@protoc_insertion_point(destructor:chess.standard.GameOverMessage)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GameOverMessage::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void GameOverMessage::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GameOverMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:chess.standard.GameOverMessage)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.winner_color_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.reason_) -
      reinterpret_cast<char*>(&_impl_.winner_color_)) + sizeof(_impl_.reason_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GameOverMessage::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .chess.standard.PieceColor winner_color = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_winner_color(static_cast<::chess::standard::PieceColor>(val));
        } else
          goto handle_unusual;
        continue;
      // .chess.standard.GameEndReason reason = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_reason(static_cast<::chess::standard::GameEndReason>(val));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GameOverMessage::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:chess.standard.GameOverMessage)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .chess.standard.PieceColor winner_color = 1;
  if (this->_internal_winner_color() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      1, this->_internal_winner_color(), target);
  }

  // .chess.standard.GameEndReason reason = 2;
  if (this->_internal_reason() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      2, this->_internal_reason(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:chess.standard.GameOverMessage)
  return target;
}

size_t GameOverMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:chess.standard.GameOverMessage)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .chess.standard.PieceColor winner_color = 1;
  if (this->_internal_winner_color() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_winner_color());
  }

  // .chess.standard.GameEndReason reason = 2;
  if (this->_internal_reason() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_reason());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GameOverMessage::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GameOverMessage::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GameOverMessage::GetClassData() const { return &_class_data_; }


void GameOverMessage::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GameOverMessage*>(&to_msg);
  auto& from = static_cast<const GameOverMessage&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:chess.standard.GameOverMessage)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_winner_color() != 0) {
    _this->_internal_set_winner_color(from._internal_winner_color());
  }
  if (from._internal_reason() != 0) {
    _this->_internal_set_reason(from._internal_reason());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GameOverMessage::CopyFrom(const GameOverMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:chess.standard.GameOverMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GameOverMessage::IsInitialized() const {
  return true;
}

void GameOverMessage::InternalSwap(GameOverMessage* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GameOverMessage, _impl_.reason_)
      + sizeof(GameOverMessage::_impl_.reason_)
      - PROTOBUF_FIELD_OFFSET(GameOverMessage, _impl_.winner_color_)>(
          reinterpret_cast<char*>(&_impl_.winner_color_),
          reinterpret_cast<char*>(&other->_impl_.winner_color_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GameOverMessage::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_chess_2eproto_getter, &descriptor_table_chess_2eproto_once,
      file_level_metadata_chess_2eproto[6]);
}

// ===================================================================

class Message::_Internal {
 public:
  static const ::chess::standard::MoveMessage& move_message(const Message* msg);
  static const ::chess::standard::MoveResultMessage& move_result_message(const Message* msg);
  static const ::chess::standard::GameOverMessage& game_over_message(const Message* msg);
};

const ::chess::standard::MoveMessage&
Message::_Internal::move_message(const Message* msg) {
  return *msg->_impl_.content_.move_message_;
}
const ::chess::standard::MoveResultMessage&
Message::_Internal::move_result_message(const Message* msg) {
  return *msg->_impl_.content_.move_result_message_;
}
const ::chess::standard::GameOverMessage&
Message::_Internal::game_over_message(const Message* msg) {
  return *msg->_impl_.content_.game_over_message_;
}
void Message::set_allocated_move_message(::chess::standard::MoveMessage* move_message) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_content();
  if (move_message) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(move_message);
    if (message_arena != submessage_arena) {
      move_message = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, move_message, submessage_arena);
    }
    set_has_move_message();
    _impl_.content_.move_message_ = move_message;
  }
  // @@protoc_insertion_point(field_set_allocated:chess.standard.Message.move_message)
}
void Message::set_allocated_move_result_message(::chess::standard::MoveResultMessage* move_result_message) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_content();
  if (move_result_message) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(move_result_message);
    if (message_arena != submessage_arena) {
      move_result_message = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, move_result_message, submessage_arena);
    }
    set_has_move_result_message();
    _impl_.content_.move_result_message_ = move_result_message;
  }
  // @@protoc_insertion_point(field_set_allocated:chess.standard.Message.move_result_message)
}
void Message::set_allocated_game_over_message(::chess::standard::GameOverMessage* game_over_message) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_content();
  if (game_over_message) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(game_over_message);
    if (message_arena != submessage_arena) {
      game_over_message = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, game_over_message, submessage_arena);
    }
    set_has_game_over_message();
    _impl_.content_.game_over_message_ = game_over_message;
  }
  // @@protoc_insertion_point(field_set_allocated:chess.standard.Message.game_over_message)
}
Message::Message(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:chess.standard.Message)
}
Message::Message(const Message& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Message* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.message_type_){}
    , decltype(_impl_.content_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_._oneof_case_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.message_type_ = from._impl_.message_type_;
  clear_has_content();
  switch (from.content_case()) {
    case kMoveMessage: {
      _this->_internal_mutable_move_message()->::chess::standard::MoveMessage::MergeFrom(
          from._internal_move_message());
      break;
    }
    case kMoveResultMessage: {
      _this->_internal_mutable_move_result_message()->::chess::standard::MoveResultMessage::MergeFrom(
          from._internal_move_result_message());
      break;
    }
    case kGameOverMessage: {
      _this->_internal_mutable_game_over_message()->::chess::standard::GameOverMessage::MergeFrom(
          from._internal_game_over_message());
      break;
    }
    case CONTENT_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:chess.standard.Message)
}

inline void Message::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.message_type_){0}
    , decltype(_impl_.content_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_._oneof_case_)*/{}
  };
  clear_has_content();
}

Message::~Message() {
  // @@protoc_insertion_point(destructor:chess.standard.Message)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Message::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (has_content()) {
    clear_content();
  }
}

void Message::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Message::clear_content() {
// @@protoc_insertion_point(one_of_clear_start:chess.standard.Message)
  switch (content_case()) {
    case kMoveMessage: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.content_.move_message_;
      }
      break;
    }
    case kMoveResultMessage: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.content_.move_result_message_;
      }
      break;
    }
    case kGameOverMessage: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.content_.game_over_message_;
      }
      break;
    }
    case CONTENT_NOT_SET: {
      break;
    }
  }
  _impl_._oneof_case_[0] = CONTENT_NOT_SET;
}


void Message::Clear() {
// @@protoc_insertion_point(message_clear_start:chess.standard.Message)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.message_type_ = 0;
  clear_content();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Message::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .chess.standard.MessageType message_type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_message_type(static_cast<::chess::standard::MessageType>(val));
        } else
          goto handle_unusual;
        continue;
      // .chess.standard.MoveMessage move_message = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_move_message(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .chess.standard.MoveResultMessage move_result_message = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_move_result_message(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .chess.standard.GameOverMessage game_over_message = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_game_over_message(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Message::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:chess.standard.Message)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .chess.standard.MessageType message_type = 1;
  if (this->_internal_message_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      1, this->_internal_message_type(), target);
  }

  // .chess.standard.MoveMessage move_message = 2;
  if (_internal_has_move_message()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::move_message(this),
        _Internal::move_message(this).GetCachedSize(), target, stream);
  }

  // .chess.standard.MoveResultMessage move_result_message = 3;
  if (_internal_has_move_result_message()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::move_result_message(this),
        _Internal::move_result_message(this).GetCachedSize(), target, stream);
  }

  // .chess.standard.GameOverMessage game_over_message = 4;
  if (_internal_has_game_over_message()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::game_over_message(this),
        _Internal::game_over_message(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:chess.standard.Message)
  return target;
}

size_t Message::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:chess.standard.Message)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .chess.standard.MessageType message_type = 1;
  if (this->_internal_message_type() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_message_type());
  }

  switch (content_case()) {
    // .chess.standard.MoveMessage move_message = 2;
    case kMoveMessage: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.content_.move_message_);
      break;
    }
    // .chess.standard.MoveResultMessage move_result_message = 3;
    case kMoveResultMessage: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.content_.move_result_message_);
      break;
    }
    // .chess.standard.GameOverMessage game_over_message = 4;
    case kGameOverMessage: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.content_.game_over_message_);
      break;
    }
    case CONTENT_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Message::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Message::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Message::GetClassData() const { return &_class_data_; }


void Message::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Message*>(&to_msg);
  auto& from = static_cast<const Message&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:chess.standard.Message)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_message_type() != 0) {
    _this->_internal_set_message_type(from._internal_message_type());
  }
  switch (from.content_case()) {
    case kMoveMessage: {
      _this->_internal_mutable_move_message()->::chess::standard::MoveMessage::MergeFrom(
          from._internal_move_message());
      break;
    }
    case kMoveResultMessage: {
      _this->_internal_mutable_move_result_message()->::chess::standard::MoveResultMessage::MergeFrom(
          from._internal_move_result_message());
      break;
    }
    case kGameOverMessage: {
      _this->_internal_mutable_game_over_message()->::chess::standard::GameOverMessage::MergeFrom(
          from._internal_game_over_message());
      break;
    }
    case CONTENT_NOT_SET: {
      break;
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Message::CopyFrom(const Message& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:chess.standard.Message)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Message::IsInitialized() const {
  return true;
}

void Message::InternalSwap(Message* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.message_type_, other->_impl_.message_type_);
  swap(_impl_.content_, other->_impl_.content_);
  swap(_impl_._oneof_case_[0], other->_impl_._oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata Message::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_chess_2eproto_getter, &descriptor_table_chess_2eproto_once,
      file_level_metadata_chess_2eproto[7]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace standard
}  // namespace chess
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::chess::standard::Position*
Arena::CreateMaybeMessage< ::chess::standard::Position >(Arena* arena) {
  return Arena::CreateMessageInternal< ::chess::standard::Position >(arena);
}
template<> PROTOBUF_NOINLINE ::chess::standard::Piece*
Arena::CreateMaybeMessage< ::chess::standard::Piece >(Arena* arena) {
  return Arena::CreateMessageInternal< ::chess::standard::Piece >(arena);
}
template<> PROTOBUF_NOINLINE ::chess::standard::BoardState*
Arena::CreateMaybeMessage< ::chess::standard::BoardState >(Arena* arena) {
  return Arena::CreateMessageInternal< ::chess::standard::BoardState >(arena);
}
template<> PROTOBUF_NOINLINE ::chess::standard::Move*
Arena::CreateMaybeMessage< ::chess::standard::Move >(Arena* arena) {
  return Arena::CreateMessageInternal< ::chess::standard::Move >(arena);
}
template<> PROTOBUF_NOINLINE ::chess::standard::MoveMessage*
Arena::CreateMaybeMessage< ::chess::standard::MoveMessage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::chess::standard::MoveMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::chess::standard::MoveResultMessage*
Arena::CreateMaybeMessage< ::chess::standard::MoveResultMessage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::chess::standard::MoveResultMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::chess::standard::GameOverMessage*
Arena::CreateMaybeMessage< ::chess::standard::GameOverMessage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::chess::standard::GameOverMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::chess::standard::Message*
Arena::CreateMaybeMessage< ::chess::standard::Message >(Arena* arena) {
  return Arena::CreateMessageInternal< ::chess::standard::Message >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
